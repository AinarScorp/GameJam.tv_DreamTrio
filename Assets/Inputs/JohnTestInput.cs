//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/JohnTestInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JohnTestInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JohnTestInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JohnTestInput"",
    ""maps"": [
        {
            ""name"": ""Call"",
            ""id"": ""a405eacc-f9f1-4f1e-b1f1-4bf083e61743"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""4ad4cb42-2e97-4b43-885d-3dc4f2e4cfd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click2"",
                    ""type"": ""Button"",
                    ""id"": ""5f635f54-ea34-4e56-8dec-23f4ffb82435"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""59b537e8-57d6-4329-a2c2-07794a9f8de2"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bf391cf-d238-4741-afeb-ee49024fe05f"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Call
        m_Call = asset.FindActionMap("Call", throwIfNotFound: true);
        m_Call_Click = m_Call.FindAction("Click", throwIfNotFound: true);
        m_Call_Click2 = m_Call.FindAction("Click2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Call
    private readonly InputActionMap m_Call;
    private ICallActions m_CallActionsCallbackInterface;
    private readonly InputAction m_Call_Click;
    private readonly InputAction m_Call_Click2;
    public struct CallActions
    {
        private @JohnTestInput m_Wrapper;
        public CallActions(@JohnTestInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Call_Click;
        public InputAction @Click2 => m_Wrapper.m_Call_Click2;
        public InputActionMap Get() { return m_Wrapper.m_Call; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CallActions set) { return set.Get(); }
        public void SetCallbacks(ICallActions instance)
        {
            if (m_Wrapper.m_CallActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_CallActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_CallActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_CallActionsCallbackInterface.OnClick;
                @Click2.started -= m_Wrapper.m_CallActionsCallbackInterface.OnClick2;
                @Click2.performed -= m_Wrapper.m_CallActionsCallbackInterface.OnClick2;
                @Click2.canceled -= m_Wrapper.m_CallActionsCallbackInterface.OnClick2;
            }
            m_Wrapper.m_CallActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Click2.started += instance.OnClick2;
                @Click2.performed += instance.OnClick2;
                @Click2.canceled += instance.OnClick2;
            }
        }
    }
    public CallActions @Call => new CallActions(this);
    public interface ICallActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnClick2(InputAction.CallbackContext context);
    }
}
